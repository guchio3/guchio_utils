# [[plugins]]
# repo = 'Shougo/neosnippet.vim'
# on_event = 'InsertCharPre'
# on_ft = 'snippet'
# depends = 'context_filetype.vim'
# # hook_add = '''
# # source ~/.config/nvim/plugins/neosnippet.rc.vim
# # '''
# 
# [[plugins]]
# repo = 'Shougo/neosnippet-snippets'
# 
# # neocomplete の上位互換
# [[plugins]]
# repo = 'Shougo/deoplete.nvim'
# hook_add = '''
#     set completeopt-=preview
#     let g:deoplete#enable_at_startup = 1
#     call deoplete#custom#option('max_list', 10000)
#     call deoplete#custom#option('auto_complete_start_length', 1)
#     call deoplete#custom#option('enable_smart_case', 1)
# '''
# # let g:deoplete#custom#option('enable_smart_case': 1)


# denite 
[[plugins]]
repo = 'Shougo/denite.nvim'
hook_add = '''
nmap <silent> ,f :<C-u>Denite file/rec<CR>
nmap <silent> ,g :<C-u>Denite grep<CR>
nmap <silent> ,t :<C-u>Denite file/type<CR>
nmap <silent> ,b :<C-u>Denite buffer<CR>
nmap <silent> ,l :<C-u>Denite line<CR>

" Define mappings
autocmd FileType denite call s:denite_my_settings()
function! s:denite_my_settings() abort
  nnoremap <silent><buffer><expr> <CR>
        \ denite#do_map('do_action')
  nnoremap <silent><buffer><expr> o
        \ denite#do_map('do_action')
  nnoremap <silent><buffer><expr> d
        \ denite#do_map('do_action', 'delete')
  nnoremap <silent><buffer><expr> p
        \ denite#do_map('do_action', 'preview')
  nnoremap <silent><buffer><expr> q
        \ denite#do_map('quit')
  nnoremap <silent><buffer><expr> i
        \ denite#do_map('open_filter_buffer')
  nnoremap <silent><buffer><expr> <Space>
        \ denite#do_map('toggle_select').'j'
endfunction

autocmd FileType denite-filter call s:denite_filter_my_settings()
function! s:denite_filter_my_settings() abort
  " toggle_select
  inoremap <silent><buffer<expr> <C-j> denite#do_map('toggle_select')
  " 一つ上のディレクトリを開き直す
  inoremap <silent><buffer><expr> <BS> denite#do_map('move_up_path')
  imap <silent><buffer> <C-o> <Plug>(denite_filter_quit)
  " Deniteを閉じる
  inoremap <silent><buffer><expr> <C-c> denite#do_map('quit')
  nnoremap <silent><buffer><expr> <C-c> denite#do_map('quit')
endfunction
" Change file/rec command.
call denite#custom#var('file/rec', 'command',
\ ['rg', '--files', '--glob', '!.git'])

" Ripgrep command on grep source
call denite#custom#var('grep', 'command', ['rg'])
call denite#custom#var('grep', 'default_opts',
    \ ['-i', '--vimgrep', '--no-heading'])
call denite#custom#var('grep', 'recursive_opts', [])
call denite#custom#var('grep', 'pattern_opt', ['--regexp'])
call denite#custom#var('grep', 'separator', ['--'])
call denite#custom#var('grep', 'final_opts', [])

" Change default action. use floating
let s:denite_win_width_percent = 0.85
let s:denite_win_height_percent = 0.7
let s:denite_default_options = {
    \ 'split': 'floating',
    \ 'winwidth': float2nr(&columns * s:denite_win_width_percent),
    \ 'wincol': float2nr((&columns - (&columns * s:denite_win_width_percent)) / 2),
    \ 'winheight': float2nr(&lines * s:denite_win_height_percent),
    \ 'winrow': float2nr((&lines - (&lines * s:denite_win_height_percent)) / 2),
    \ 'highlight_filter_background': 'DeniteFilter',
    \ 'prompt': '$ ',
    \ 'start_filter': v:true,
    \ }
call denite#custom#option('default', s:denite_default_options)
" call denite#custom#kind('file', 'default_action', 'split')
'''


# activate git on vim
[[plugins]]
repo = 'tpope/vim-fugitive'


# AUTO BRACKETS http://qiita.com/pepo/items/60c3ddb8925e49808a76
[[plugins]]
repo = 'cohama/lexima.vim'


# NERDTree
[[plugins]]
repo = 'scrooloose/nerdtree'


# Resize window
[[plugins]]
repo = 'simeji/winresizer'


#==========================
#
#      COLOR SCHEMES
#
#==========================
# color scheme
[[plugins]]
#repo = 'raphamorim/lucario'
#repo = 'fneu/breezy'
#repo = 'joshdick/onedark.vim'
#repo = 'altercation/vim-colors-solarized'
#repo = 'nanotech/jellybeans.vim'
#repo = 'drewtempelmeyer/palenight.vim'
#repo = 'jacoborus/tender.vim'
repo = 'w0ng/vim-hybrid'
hook_add = '''
  set background=dark
  " colorscheme 設定は source 後に行う必要があるので VimEnter で行う。
  " 但し Colorscheme イベントの発生が抑制されないよう nented を付ける。
  " au MyAutoCmd VimEnter * nested colorscheme hybrid
  colorscheme hybrid
'''


[[plugins]]
repo = 'itchyny/lightline.vim'


# # for airline color scheme
# [[plugins]]
# repo = 'vim-airline/vim-airline'
# depends = ['vim-airline-themes']
# hook_add = '''
# let g:airline_powerline_fonts = 1
# '''
# 
# 
# # for airline color scheme
# [[plugins]]
# repo = 'vim-airline/vim-airline-themes'
# #hook_add = 'let g:airline_solarized_bg="dark"'
# 
# 
# # set airline as deviconed (I avoid using this plugin because of mozibake)
# #[[plugins]]
# #repo = 'ryanoasis/vim-devicons'

[[plugins]]
repo = 'rust-lang/rust.vim'
on_ft = 'rust'
#hook_add = '''
# source ~/.config/nvim/plugins/rust.rc.vim
#'''

[[plugins]]
repo = 'neoclide/coc.nvim'
rev = 'release'
build = '''
  git checkout release
'''
hook_add = '''
"LightLineにcoc.nvimのステータスを載せます
set noshowmode
let g:lightline = {
  \'colorscheme': 'powerline',
  \'separator': { 'left': '', 'right': '' },
  \'subseparator' :{ 'left': '|', 'right': '|' },
  \'active': {
    \'left': [
      \['mode', 'paste'],
      \['gitbranch', 'readonly', 'repofilename', 'modified']
    \],
    \'right': [
      \['coc']
    \]
  \},
  \'component_function': {
    \'coc': 'coc#status',
    \'gitbranch': 'FugitiveHead',
    \'repofilename': 'LightlineFilename',
  \}
\}
function! LightlineFilename()
  let root = fnamemodify(get(b:, 'git_dir'), ':h')
  let path = expand('%:p')
  if path[:len(root)-1] ==# root
    return path[len(root)+1:]
  endif
  return expand('%')
endfunction

" TextEdit might fail if hidden is not set.
set hidden

" Some servers have issues with backup files, see #649.
set nobackup
set nowritebackup

" Give more space for displaying messages.
set cmdheight=2

" Having longer updatetime (default is 4000 ms = 4 s) leads to noticeable
" delays and poor user experience.
set updatetime=300

" Don't pass messages to |ins-completion-menu|.
set shortmess+=c

" Use tab for trigger completion with characters ahead and navigate.
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
if has('nvim')
  inoremap <silent><expr> <c-space> coc#refresh()
else
  inoremap <silent><expr> <c-@> coc#refresh()
endif

" Use `[g` and `]g` to navigate diagnostics
" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
nmap <silent> <C-p> <Plug>(coc-diagnostic-prev)
nmap <silent> <C-n> <Plug>(coc-diagnostic-next)

" Highlight the symbol and its references when holding the cursor.
autocmd ColorScheme * highlight CocHighlightText ctermbg=238
autocmd CursorHold * silent call CocActionAsync('highlight')

" diagnostics の色変
autocmd ColorScheme * highlight CocErrorSign ctermfg=1 cterm=BOLD
autocmd ColorScheme * highlight CocWarningSign ctermfg=33 cterm=BOLD
autocmd ColorScheme * highlight link CocErrorHighlight CocErrorSign
autocmd ColorScheme * highlight link CocWarningHighlight CocWarningSign
" autocmd ColorScheme * highlight CocErrorLine ctermfg=138 cterm=BOLD
" autocmd ColorScheme * highlight CocWarningLine ctermfg=74 cterm=BOLD

" guchio shortcut
" CocList
nmap ,l :<C-u>CocList<cr>
" Hover
nmap K :<C-u>call CocAction('doHover')<cr>
" Definition
nmap <C-]> <Plug>(coc-definition)
" References
nmap <C-[> <Plug>(coc-references)
" Rename
" nmap <silent> <space>rn <Plug>(coc-rename)
" Format
xmap ,a <Plug>(coc-format)
nmap ,a <Plug>(coc-format)
'''
