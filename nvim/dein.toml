# [[plugins]]
# repo = 'Shougo/neosnippet.vim'
# on_event = 'InsertCharPre'
# on_ft = 'snippet'
# depends = 'context_filetype.vim'
# # hook_add = '''
# # source ~/.config/nvim/plugins/neosnippet.rc.vim
# # '''
# 
# [[plugins]]
# repo = 'Shougo/neosnippet-snippets'
# 
# # neocomplete の上位互換
# [[plugins]]
# repo = 'Shougo/deoplete.nvim'
# hook_add = '''
#     set completeopt-=preview
#     let g:deoplete#enable_at_startup = 1
#     call deoplete#custom#option('max_list', 10000)
#     call deoplete#custom#option('auto_complete_start_length', 1)
#     call deoplete#custom#option('enable_smart_case', 1)
# '''
# # let g:deoplete#custom#option('enable_smart_case': 1)


# denite 
[[plugins]]
repo = 'Shougo/denite.nvim'
hook_add = '''
nmap <silent> ,f :<C-u>Denite file/rec<CR>
nmap <silent> ,g :<C-u>Denite grep<CR>
nmap <silent> ,t :<C-u>Denite file/type<CR>
nmap <silent> ,b :<C-u>Denite buffer<CR>
nmap <silent> ,l :<C-u>Denite line<CR>

" Define mappings
autocmd FileType denite call s:denite_my_settings()
function! s:denite_my_settings() abort
  nnoremap <silent><buffer><expr> <CR>
        \ denite#do_map('do_action')
  nnoremap <silent><buffer><expr> o
        \ denite#do_map('do_action')
  nnoremap <silent><buffer><expr> d
        \ denite#do_map('do_action', 'delete')
  nnoremap <silent><buffer><expr> p
        \ denite#do_map('do_action', 'preview')
  nnoremap <silent><buffer><expr> q
        \ denite#do_map('quit')
  nnoremap <silent><buffer><expr> i
        \ denite#do_map('open_filter_buffer')
  nnoremap <silent><buffer><expr> <Space>
        \ denite#do_map('toggle_select').'j'
endfunction

autocmd FileType denite-filter call s:denite_filter_my_settings()
function! s:denite_filter_my_settings() abort
  " toggle_select
  inoremap <silent><buffer<expr> <C-j> denite#do_map('toggle_select')
  " 一つ上のディレクトリを開き直す
  inoremap <silent><buffer><expr> <BS> denite#do_map('move_up_path')
  imap <silent><buffer> <C-o> <Plug>(denite_filter_quit)
  " Deniteを閉じる
  inoremap <silent><buffer><expr> <C-c> denite#do_map('quit')
  nnoremap <silent><buffer><expr> <C-c> denite#do_map('quit')
endfunction
" Change file/rec command.
call denite#custom#var('file/rec', 'command',
\ ['rg', '--files', '--glob', '!.git'])

" Ripgrep command on grep source
call denite#custom#var('grep', 'command', ['rg'])
call denite#custom#var('grep', 'default_opts',
    \ ['-i', '--vimgrep', '--no-heading'])
call denite#custom#var('grep', 'recursive_opts', [])
call denite#custom#var('grep', 'pattern_opt', ['--regexp'])
call denite#custom#var('grep', 'separator', ['--'])
call denite#custom#var('grep', 'final_opts', [])

" Change default action. use floating
let s:denite_win_width_percent = 0.85
let s:denite_win_height_percent = 0.7
let s:denite_default_options = {
    \ 'split': 'floating',
    \ 'winwidth': float2nr(&columns * s:denite_win_width_percent),
    \ 'wincol': float2nr((&columns - (&columns * s:denite_win_width_percent)) / 2),
    \ 'winheight': float2nr(&lines * s:denite_win_height_percent),
    \ 'winrow': float2nr((&lines - (&lines * s:denite_win_height_percent)) / 2),
    \ 'highlight_filter_background': 'DeniteFilter',
    \ 'prompt': '$ ',
    \ 'start_filter': v:true,
    \ }
call denite#custom#option('default', s:denite_default_options)
" call denite#custom#kind('file', 'default_action', 'split')
'''


# activate git on vim
[[plugins]]
repo = 'tpope/vim-fugitive'


# ctags tools
[[plugins]]
repo = 'ludovicchabant/vim-gutentags'
on_ft = ['python']
hook_add = 'set tags+=~/.config/nvim/tags/pylibs.tags'
#    set statusline+=%{gutentags#statusline()}



# AUTO BRACKETS http://qiita.com/pepo/items/60c3ddb8925e49808a76
[[plugins]]
repo = 'cohama/lexima.vim'


# NERDTree
[[plugins]]
repo = 'scrooloose/nerdtree'


# Resize window
[[plugins]]
repo = 'simeji/winresizer'


# quick-run 
[[plugins]]
repo = 'thinca/vim-quickrun'
hook_add = '''let g:quickrun_config = {
      \   "_" :{
      \         "split" : "vertical",
      \         "runner" : "vimproc",
      \         "runner/vimproc/updatetime" : 40
      \         },
      \   "tex" : {
      \       'command' : 'latexmk',
      \       "outputter/buffer/split" : ":botright 8sp",
      \       'outputter/error/error' : 'quickfix',
      \       'hook/cd/directory': '%S:h',
      \       'exec': '%c %s'
      \   },
      \}'''
hook_add = 'set splitright'

 
## for LaTeX
#[[plugins]]
#repo = 'lervag/vimtex'
#hook_add = 'let g:vimtex_fold_envs = 0'
## hook_add = "let g:vimtex_view_general_viewer = 'mupdf'"
#hook_add = 'let g:vimtex_view_general_viewer = "/Applications/Skim.app/Contents/SharedSupport/displayline"
#hook_add = 'let g:vimtex_view_general_options = "-r @line @pdf @tex"'
#hook_add = 'let g:vimtex_view_general_options_latexmk = "-r 1"'


# vimproc is used for quickrun at least
[[plugins]]
repo = 'Shougo/vimproc'



#==========================
#
#      COLOR SCHEMES
#
#==========================
# color scheme
[[plugins]]
#repo = 'raphamorim/lucario'
#repo = 'fneu/breezy'
#repo = 'joshdick/onedark.vim'
#repo = 'altercation/vim-colors-solarized'
#repo = 'nanotech/jellybeans.vim'
#repo = 'drewtempelmeyer/palenight.vim'
#repo = 'jacoborus/tender.vim'
repo = 'w0ng/vim-hybrid'
hook_add = '''
  set background=dark
  " colorscheme 設定は source 後に行う必要があるので VimEnter で行う。
  " 但し Colorscheme イベントの発生が抑制されないよう nented を付ける。
  au MyAutoCmd VimEnter * nested colorscheme hybrid
'''


[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
let g:lightline = {
      \ 'colorscheme': 'jellybeans',
      \ }
'''


# # for airline color scheme
# [[plugins]]
# repo = 'vim-airline/vim-airline'
# depends = ['vim-airline-themes']
# hook_add = '''
# let g:airline_powerline_fonts = 1
# '''
# 
# 
# # for airline color scheme
# [[plugins]]
# repo = 'vim-airline/vim-airline-themes'
# #hook_add = 'let g:airline_solarized_bg="dark"'
# 
# 
# # set airline as deviconed (I avoid using this plugin because of mozibake)
# #[[plugins]]
# #repo = 'ryanoasis/vim-devicons'

[[plugins]]
repo = 'rust-lang/rust.vim'
on_ft = 'rust'
#hook_add = '''
# source ~/.config/nvim/plugins/rust.rc.vim
#'''

[[plugins]]
repo = 'neoclide/coc.nvim'
rev = 'release'
build = '''
  git checkout release
'''
hook_add = '''
"LightLineにcoc.nvimのステータスを載せます
let g:lightline = {
  \'active': {
    \'right': [
      \['coc']
    \]
  \},
  \'component_function': {
    \'coc': 'coc#status'
  \}
\}
" guchio shortcut
" CocList
nmap ,l :<C-u>CocList<cr>
" Hover
nmap ,h :<C-u>call CocAction('doHover')<cr>
" Definition
nmap <C-]> <Plug>(coc-definition)
" References
nmap <C-[> <Plug>(coc-references)
" Rename
" nmap <silent> <space>rn <Plug>(coc-rename)
" Format
nmap ,a <Plug>(coc-format)
'''



